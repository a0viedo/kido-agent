#!/usr/bin/env node

require("simple-errors");
require("../lib/customizeWinston");

var os          = require("os");
var winston     = require("winston");
var Agent       = require("../lib/agent");
var pkg         = require("../package.json");
var semver      = require("semver");
var timeout;
var agentInstance;

process.title = pkg.name;

winston.info("node version", process.version);
winston.info("process title", process.title);
winston.info("process version", pkg.version);
winston.info("process platform", process.platform);
winston.info("process arch", process.arch);
winston.info("os platform", os.platform());
winston.info("os arch", os.arch());

// Catch any unhandled exception
process.on("uncaughtException", function (err) {
    winston.debug(err.message, Error.toJson(err));
    winston.error("An error ocurred:", err.message);
    process.exit();
});

// message from parent process
process.on("message", function (data) {
    if (data.event === "SIGINT") {
        process.exitCode = 0;
        if (agentInstance) {
            agentInstance.removeAllListeners("disconnect");
            agentInstance.stop(function () {
                process.exit();
            });
        } else {
            process.exit();
        }
    } else {
        winston.debug("Not supported message.");
    }
});

process.exitCode = 1;

if (!semver.satisfies(process.version, "0.10.x")) {
    return process.send({
        error: "The agent supports only version '0.10.x' of Node.js."
    });
}

initialize();

function watchAgent() {
    "use strict";
    var retryDelay = 300000;
    //just a safety measure
    winston.info("Trying to initialize again in " + retryDelay / 1000 + " seconds...");
    if (!timeout) {
        timeout = setInterval(function () {
            winston.info("Creating a new instance of the agent.");
            initialize();
        }, retryDelay);
    }
}

function initialize() {
    // creates an agent instance
    agentInstance = new Agent();
    agentInstance.on("connect", function () {
        clearInterval(timeout);
        timeout = undefined;
    });
    agentInstance.on("disconnect", function () {
        watchAgent();
    });
    agentInstance.initialize(function (err) {
        if (err) {
            winston.error("Couldn't initialize the agent:", err.message);
            winston.debug(err.message, Error.toJson(err));
            return watchAgent();
        }
        // authenticates the agent against kidozen using configured credentials
        agentInstance.authenticate(function (err) {
            if (err) {
                winston.error("Couldn't authenticate the agent against KidoZen services.", err.message);
                winston.debug(err.message, Error.toJson(err));
                return watchAgent();
            }
            // starts the agent intance
            agentInstance.start(function (err) {
                if (err) {
                    winston.error("The agent couldn't start:", err.message);
                    winston.debug(err.message, Error.toJson(err));
                    return watchAgent();
                }
            });
        });
    });
}