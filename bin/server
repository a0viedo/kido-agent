#!/usr/bin/env node

// Module's dependencies 
require("simple-errors");

var os		= require("os");
var winston = require("winston");
var agent 	= require("../lib/agent");
var moment  = require('moment');
var readLine = require ("readline");

var level = process.argv.indexOf("--level");
level = ((level > -1) ? process.argv[level + 1] : null) || "info"; 
winston.clear();
winston.add(winston.transports.Console, 
	{ colorize: true, level: level, 
		'timestamp': function() {var m = new moment(); return m.format("(YYYY-MM-DD HH:mm)"); } });

var keypress = require('keypress');
keypress(process.stdin);

// Catch any unhandled exception
process.on('uncaughtException', function (err) {

	if (err instanceof Error) err = Error.toJson(err);
	winston.error (JSON.stringify(err, null, "  "));

	if (agent) {
		agent.stop(function() {
			process.exit();
		});
	}
});

process.on('exit', function() {
    winston.info ("bye!");
});

// creates an agent instance
var agent = new Agent();

// initializes the agent instance
agent.initialize(function (err) {
	if (err) throw Error.create("Couldn't initialize agent instance.", err);

	// authenticates the agent against kidozen using configured credentials
	agent.authenticate(function (err) {
		if (err) throw Error.create("Couldn't authenticate the agent instance against KidoZen services.", err);

		// starts the agent intance
		agent.start(function (err) {
			if (err) throw Error.create("Couldn't start agent instance.", err);

			//Windows doesn't emit SIGNINT on CTRL+C
			//We use readline to listen to that event
			if (process.platform === "win32"){
			    var rl = readLine.createInterface ({
			        input: process.stdin,
			        output: process.stdout
			    });

			    rl.on ("SIGINT", function (){
			        process.emit ("SIGINT");
			    });
			}

			// Wait for a Ctrl+C (SIGINT) to exit
		    winston.info (os.EOL + os.EOL + 'Press Control-C to exit.' + os.EOL + os.EOL);
			process.on('SIGINT', function() {
				winston.info ("stopping agent instance");
				agent.stop(function() {
					process.exit();
				});
			});
		});
	});
});
