#!/usr/bin/env node
'use strict';

require("../lib/customizeWinston");

var fs          = require('fs');
var os          = require('os');
var spawn       = require('child_process').spawn;
var path        = require('path');
var readLine    = require("readline");
var winston     = require("winston");
var prompt      = require('prompt');

var exec = function(cmd, cb){
    winston.debug('Executing command: "' + cmd + '"');
    require('child_process').exec(cmd, cb);
};

var param = process.argv[2];
var configFileName          = 'config.json';
var linuxBashFileName       = 'installService.sh';

switch (param) {
    case 'init':
        init();
        break;
    case 'run':
        run();
        break;
    case 'install-service':
        installService();
        break;
    case 'uninstall-service':
        uninstallService();
        break;
    default:
        run();
}

function getConfigFile(cb) {
    fs.readFile(configFileName, function (err, data) {
        cb(err, data ? JSON.parse(data.toString()) : {});
    });
}

function init() {
    var config = {
        name: '',
        credentials: {
            user: '',
            password: '',
            marketplace: ''
        }
    };
    var defaultName = '',
        defaultUser = '',
        defaultPassword = '',
        defaultMarketplace = '';
    // check if the config.json exists
    getConfigFile(function (err, prevConfig) {
        if (err && err.code !== 'ENOENT') {
            winston.error(err);
            return;
        }

        if (prevConfig && prevConfig.name) {
            defaultName = prevConfig.name;
        }
        if (prevConfig && prevConfig.credentials && prevConfig.credentials.user) {
            defaultUser = prevConfig.credentials.user;
        }
        if (prevConfig && prevConfig.credentials && prevConfig.credentials.password) {
            defaultPassword = prevConfig.credentials.password;
        }
        if (prevConfig && prevConfig.credentials && prevConfig.credentials.marketplace) {
            defaultMarketplace = prevConfig.credentials.marketplace;
        }

        var schema = {
            properties: {
                name: {
                    pattern: /^[a-zA-Z0-9\-]+$/,
                    message: 'Name must be only letters, numbers or dashes',
                    type: 'string',
                    default: defaultName,
                    required: true
                },
                user: {
                    type: 'string',
                    default: defaultUser,
                    required: true
                },
                password: {
                    type: 'string',
                    default: defaultPassword,
                    hidden: true
                },
                marketplace: {
                    type: 'string',
                    default: defaultMarketplace,
                    required: true
                }
            }
        };
        prompt.start();

        prompt.get(schema, function (err, result) {
            if (err)  return winston.error(err);

            config.name = result.name;
            config.credentials.user = result.user;
            config.credentials.password = result.password;
            config.credentials.marketplace = result.marketplace;

            fs.writeFile(configFileName, JSON.stringify(config, null, "  "), function (err) {
                if (err)  return winston.error(err);
                winston.info('Config file saved successfully.');
            });
        });
    });
}


function run() {
    var server, args = process.argv.slice(2,process.argv.length);
    args.unshift(path.resolve(__dirname, './process'));
    server = spawn('node', args);
    server.stdout.on('data', function (data) {
        winston.info(data.toString());
    });
    server.stderr.on('data', function (data) {
        winston.info(data.toString());
    });

    if (process.platform === "win32") {
        var rl = readLine.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        rl.on("SIGINT", function () {
            process.emit("SIGINT");
        });
    }

    // Wait for a Ctrl+C (SIGINT) to exit
    winston.info(os.EOL + os.EOL + 'Press Control-C to exit.' + os.EOL + os.EOL);
    process.on('SIGINT', function () {
        winston.info("stopping agent instance");
        process.exitCode = 0;
        process.exit();
    });

    process.on('SIGTERM', function () {
        winston.info("stopping agent instance");
        process.exitCode = 0;
        process.exit();
    });

    process.exitCode = 1;
    process.on('exit', function () {
        if (process.exitCode !== 0) {
            winston.error();
            winston.error();
            winston.error("If you continue to have problems to run the agent, please contact the support with the 'agent.log' file at support@kidozen.com.");
            winston.error();
            winston.error();
        }
        winston.info("bye!");
    });
}

function installService() {
    getConfigFile(function (err, config) {
        if (err || !config.name) {
            winston.error('Config file not found. Run kido-agent init to create one.');
            return;
        }
        if (os.platform() === 'linux') {
            var uid = parseInt(process.env.SUDO_UID);
            //check for sudo
            if (!uid) {
                winston.error('Root permissions are needed.');
                return;
            }

            fs.readFile(linuxBashFileName, function (err, bashFile) {
                var service = bashFile.toString().replace(/kido-agent/g, config.name)
                    .replace(/current-dir/g, process.cwd());

                fs.writeFile('/etc/init.d/' + config.name, service, function (err) {
                    if (err) {
                        winston.error('An error occurred while trying to save the bash file:' + err);
                        return;
                    }
                    fs.chmod('/etc/init.d/' + config.name, 755, function (err) {
                        if (err) {
                            winston.error('An error occurred while trying to install the service:' + err);
                            return;
                        }

                        exec('update-rc.d ' + config.name + ' defaults', function (err, stdout, stderr) {
                            if (err) {
                                winston.error('An error occurred while trying to install the service:' + err);
                                return;
                            }
                            winston.info('Service installed successfully');
                        });
                    });
                });
            });
        }

        if (os.platform() === 'win32') {
            exec('npm config get prefix', function (err, stdout, stderr) {
                var nssm, command;
                if (err) {
                    winston.error('An error occurred while trying to install the service:' + err);
                    return;
                }
                nssm = getNSSMPath(os.arch());
                command = nssm + ' install ' + config.name +' "' + 
                    process.execPath + '" "' + 
                    path.resolve(__dirname, './process').replace(/ /g, '^ ') + '"';
                exec(command, function (err) {
                    if (err) {
                        winston.error('An error occurred while trying to install the service:' + err);
                        return;
                    }

                    command = nssm + ' set ' + config.name + ' AppDirectory ' + process.cwd();
                    exec(command, function (err) {
                        if (err) {
                            winston.error('An error occurred while trying to install the service:' + err);
                            return;
                        }
                        winston.info('Service installed successfully');
                    });
                });
            });
        }
    });
}

function uninstallService() {
    getConfigFile(function (err, config) {
        var command;
        if (err || !config.name) {
            winston.error('Config file not found. Run kido-agent init to create one.');
            return;
        }
        if (os.platform() === 'linux') {
            var uid = parseInt(process.env.SUDO_UID);
            // check for sudo
            if (!uid) {
                winston.error('Root permissions are needed.');
                return;
            }
            exec('update-rc.d -f ' + config.name + ' remove', function (err, stdout, stderr) {
                if (err) {
                    winston.error('An error occurred while trying to remove the service:' + err);
                    return;
                }

                exec('rm /etc/init.d/' + config.name, function (err, stdout, stderr) {
                    if (err) {
                        winston.error('An error occurred while trying to remove the service:' + err);
                        return;
                    }
                    winston.info('Service installed successfully');
                });
            });
        }

        if (os.platform() === 'win32') {
            // nssm magic
            command = getNSSMPath(os.arch());
            exec(command + ' stop ' + config.name + ' confirm', function(err){
                if(err) {
                    winston.error('An error occurred while trying to remove the service:' + err);
                    return;
                }
                command = command + ' remove ' + config.name + ' confirm';
                exec(command, function (err) {
                    if (err) {
                        winston.error('An error occurred while trying to remove the service:' + err);
                        return;
                    }
                    winston.info('Service removed successfully');
                });
            });
        }
    });
}

function getNSSMPath(arch) {
    if (arch === 'ia32') {
        return '"' + path.resolve(__dirname, './nssm32.exe') + '"';
    } else {
        return '"' + path.resolve(__dirname, './nssm64.exe') + '"';
    }    
}
