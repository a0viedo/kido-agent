#!/usr/bin/env node
'use strict';
var fs          = require('fs');
var os          = require('os');
var exec        = require('child_process').exec;
var spawn       = require('child_process').spawn;
var read        = require('read');
var path        = require('path');

var param = process.argv[2];
var configFileName          = 'config.json';
var linuxBashFileName       = 'installService.sh';

switch (param) {
    case 'init':
        init();
        break;
    case 'run':
        run();
        break;
    case 'install-service':
        installService();
        break;
    case 'uninstall-service':
        uninstallService();
        break;
    default:
        run();
}

function formatDefaults(str) {
    // replaces any '(' or ')' occurrences with ''
    return str.replace(/\(|\)/g, '');
}

function getConfigFile(cb) {
    fs.readFile(configFileName, function (err, data) {
        cb(err, data ? JSON.parse(data.toString()) : {});
    });
}

function init() {
    var config = {
        name: '',
        credentials: {
            user: '',
            password: '',
            marketplace: ''
        }
    };
    var defaultName = '',
        defaultUser = '',
        defaultPassword = ''
        defaultMarketplace = '';
    // check if the config.json exists
    getConfigFile(function (err, prevConfig) {
        if (err && err.code !== 'ENOENT') {
            console.error(err);
            return;
        }

        if (prevConfig && prevConfig.name) {
            defaultName = '(' + prevConfig.name + ')';
        }
        if (prevConfig && prevConfig.credentials && prevConfig.credentials.user) {
            defaultUser = '(' + prevConfig.credentials.user + ')';
        }
        if (prevConfig && prevConfig.credentials && prevConfig.credentials.password) {
            defaultPassword = '(' + prevConfig.credentials.password + ')';
        }
        if (prevConfig && prevConfig.credentials && prevConfig.credentials.marketplace) {
            defaultMarketplace = '(' + prevConfig.credentials.marketplace + ')';
        }
        read({prompt: 'Name' + defaultName + ':'}, function (err, name) {
            if (!name && defaultName) {
                config.name = formatDefaults(defaultName);
            } else {
                config.name = name;
            }

            read({prompt: 'User' + defaultUser + ':'}, function (err, user) {
                if (!user && defaultUser) {
                    config.credentials.user = formatDefaults(defaultUser);
                } else {
                    config.credentials.user = user;
                }

                read({prompt: 'Password:', silent: true}, function (err, pass) {
                    if (!pass && defaultPassword) {
                        config.credentials.password = formatDefaults(defaultPassword);
                    } else {
                        config.credentials.password = pass;
                    }

                    read({prompt: 'Marketplace' + defaultMarketplace + ':'}, function (err, marketplace) {
                        if (!marketplace && defaultMarketplace) {
                            config.credentials.marketplace = formatDefaults(defaultMarketplace);
                        } else {
                            config.credentials.marketplace = marketplace;
                        }

                        console.log(config);
                        fs.writeFile(configFileName, JSON.stringify(config), function (err) {
                            if (err) {
                                console.error(err);
                                return;
                            }

                            console.log('Config file saved successfully.');
                        });
                    });
                });
            });
        });
    });
}

function run() {
    var server;
    server = spawn('node', [path.resolve(__dirname, './process')]);
    server.stdout.on('data', function (data) {
        console.log(data.toString());
    });
    server.stderr.on('data', function (data) {
        console.log(data.toString());
    });
}

function installService() {
    getConfigFile(function (err, config) {
        if (os.platform() === 'linux') {
            var uid = parseInt(process.env.SUDO_UID);
            //check for sudo
            if (!uid) {
                console.log('Root permissions are needed.');
                return;
            }

            fs.readFile(linuxBashFileName, function (err, bashFile) {
                var service = bashFile.toString().replace(/kido-agent/g, config.name)
                    .replace(/current-dir/g, process.cwd());

                fs.writeFile('/etc/init.d/' + config.name, service, function (err) {
                    if (err) {
                        console.log('An error occurred while trying to save the bash file:' + err);
                        return;
                    }
                    fs.chmod('/etc/init.d/' + config.name, 755, function (err) {
                        if (err) {
                            console.log('An error occurred while trying to install the service:' + err);
                            return;
                        }

                        exec('update-rc.d ' + config.name + ' defaults', function (err, stdout, stderr) {
                            if (err) {
                                console.log('An error occurred while trying to install the service:' + err);
                                return;
                            }
                            console.log('Service installed successfully');
                        });
                    });
                });
            });
        }

        if (os.platform() === 'win32') {
            exec('npm config get prefix', function (err, stdout, stderr) {
                var nssm, command;
                if (err) {
                    console.log('An error occurred while trying to install the service:' + err);
                    return;
                }
                if (os.arch() === 'ia32') {
                    nssm = path.resolve(__dirname, './nssm32.exe');
                } else {
                    nssm = path.resolve(__dirname, './nssm64.exe');
                }
                command = nssm + ' install ' + config.name +
                    ' "' + process.execPath + '" "' + path.resolve(__dirname, './process') + '"';
                exec(command, function (err) {
                    if (err) {
                        console.log('An error occurred while trying to install the service:' + err);
                        return;
                    }

                    command = nssm + ' set ' + config.name + ' AppDirectory ' + process.cwd();
                    exec(command, function (err) {
                        if (err) {
                            console.log('An error occurred while trying to install the service:' + err);
                            return;
                        }
                        console.log('Service installed successfully');
                    });
                });
            });
        }
    });
}

function uninstallService() {
    getConfigFile(function (err, config) {
        var command;
        if (err) {
            console.log('Config file not found. Run kido-agent init to create one.');
            return;
        }
        if (os.platform() === 'linux') {
            var uid = parseInt(process.env.SUDO_UID);
            // check for sudo
            if (!uid) {
                console.log('Root permissions are needed.');
                return;
            }
            exec('update-rc.d -f ' + config.name + ' remove', function (err, stdout, stderr) {
                if (err) {
                    console.log('An error occurred while trying to remove the service:' + err);
                    return;
                }

                exec('rm /etc/init.d/' + config.name, function (err, stdout, stderr) {
                    if (err) {
                        console.log('An error occurred while trying to remove the service:' + err);
                        return;
                    }
                    console.log('Service installed successfully');
                });
            });
        }

        if (os.platform() === 'win32') {
            // nssm magic
            if (os.arch() === 'ia32') {
                command = path.resolve(__dirname, './nssm32.exe');
            } else {
                command = path.resolve(__dirname, './nssm64.exe');
            }
            command = command + ' remove ' + config.name + ' confirm';
            exec(command, function (err) {
                if (err) {
                    console.log('An error occurred while trying to remove the service:' + err);
                    return;
                }
                console.log('Service removed successfully');
            });
        }
    });
}